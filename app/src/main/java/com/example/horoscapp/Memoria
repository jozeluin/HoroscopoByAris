
1º Dia 25/9/23

    Lo dejamos en 1:02:10
    Imports con el gradle de kotlin, configuracion
    Construccion inicial , binding, FragmenContainerView, menu

    54:11 creacion del menu inferir de desplazamiento

    1:00:00
    Creacion menu toolbar inferior

2º 26/09/23

    Menu, el nav controller, funcionamiento del menu
    Colores de fragments, creacion selectores, quitar sombreado iconos

    1:14:52

 3º 27/09
    Git.
    1:20:46

4º 01/10
    toolbar, añadiendo fuentes. Hay que manipular los nombres de la fuentes, sin mayusculas
    ni guiones. Si no android no lo lee
    Dagger Hilt,implementacion
    Crear fichero aplication
    ViewModels
    HoroscopeInfo
    StateFlow
    2:00:14

5º 01/10
    StateFlow
    RecyclerView
    2:31:01

6º 2/10

    Provider, funcion lambda
    Creacion listener al pulsar, habilitar que haga
    algo al clicar dentro del recyclerView
    2:42:50

7ª
    Crear animacion
    2:50:23

8º
    Crear ActivivityDetail
    Navegacion, Dependencias safeArgs,navegacion a AcivityDetail
    3:02:23

9ª
    Para saber que la pantalla Detail sepa que hemos pulsado.
    Creacion de nuevo modelo de datos enumerado, que pasaremos al
    llamar el Adapter en HoroscopeFragment.
    Creacion del argumento que se pasa de HoroscopeFragment a el
    ActivityDetail y su recuperacion
    3:12:05

10º
    Creacion del layout del Detail. Creacion de stylos, y stylos con parent
    .Creacion de vector y colocacion en pantalla detail. Colocamo Progressbar
    3:36:53


3:37 Trabajar con estados
3:46 Preparar estados y empezar a trabajar con ellos. Colocacion permiso internet en manifest
3:48 Consumo de Api.Colocacion librerias Retrofit
4:00 Usando el editor online JsonEditorOnline para ver lo  que nos devuelve el Api
4:06 Division de capas
4:11:46 DaggerHilt, en Interface . Creacion de modulos, no puedo inyectar librerias externas
        Creacion de Modulos
4:18 Hemos podido pasar la interface con Dagger
4:26 Cambio de modelo de datos en las diferentes capas.PredictionModel
4:34 Injectando Repository
4:41 En HoroscopeDetailViewModel, en las courutinas

4:49 Configuracion del lisener en el boton superior izquierda para volver atras
    Colcar en la pantalla detail una imagen

4:56 Mejora de retrofit con los interceptor
5:04 Creacion de nuestro propip interceptor desde 0
5:13 Remodelando modulos, cambiando provideRetrofit.
    Creacion de url de prueba con datos falsos para desarrolladores. Los buildTypes
5:21 Configuracion en los buildtypes de nombres personalizados para cada tipo de buildtype. Debug Release
5:25 Comenzamos con el fragment luckFragment
5:37 Acabamos animacion ruleta
5:43 Creacion de animacion en xml
5:57 Fallo animacion. y fallo en provideOkHtppClient miralo al colocarlo no va conexion a internet

Seguimos con el fallo, en el cambio de los buildTypes. Al cambiar a debug no funciona conexion datos
el android:label, cambia el titulo del icono en el movil.

Solucionado problemas con conexion y con el interceptor. El fallo mas importanre ha sido al escrivir en
el  .client(okHttpClient) en el NetworkModule que ponia la o en mayuscula.

Y en los Buildtypes en las diferentes configuraciones no ponia la direccion web bien

6:00 Reparamos animacion. Ahora empezamos a preparar la imagen final y el compartir
6:16 Hasta aqui hemos creado las diferentes animaciones que hacen falta en el fragmente LuckFragment
     . Aparti de aqui necesitamos que aparezca la prediccion
6:23 Estamos creando el modelo de datos en LuckyMode
6:33 Hasta aqui hemos conseguido que en Luck salga la carta y la prediccio, ahora vamos a acabar la
     Funcionalidad de compartir
6:43 Hemos terminado la pantalla luck. Tambien al final nos ha explicado como hacer un swipe, bueno
        no lo avexplicado porque era muy dificil. swipe es arrastrar, ha cambiado el listener de hacer
        girar la ruleta. Ahora parece que la arrastra
6:44 Comenzamos lo de la palma de la mano, PalmistryFragment
6:56 Implementaciones necesarias + Permisos camara en PalmistryFragment
